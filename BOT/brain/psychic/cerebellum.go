/* Рефлексы мозжечка

Самый первый уровень осознания - подгонка действий под заданную цель.

Оценка результата автоматизма и корректировка мозжечковыми рефлексами ПРИ ОСОЗНАНИИ ЦЕЛИ И ПЕРЕБОРА-НЕДОБОРА,
А ТАК ЖЕ НЕОБХОДИМОСТИ ДОПОЛНИТЕЛЬНЫХ (корректирующих) ДЕЙСТВИЙ.

Если нет эффекта от фразы - усилить ее и м. б. дополнить другими действиями и фразами, фиксируя результат в рефлексе мозжечка
- примитивный уровень осмысления после активации дерева понимания.

Для каждого действия brain\reflexes\terminete_action.go задается "сила" действия в градации от 1 до 10, которая передается на Пульт словами:
максимально сильно, очень сильно, ... едва-едва.

Это - только на уровне осмысления в Дереве Понимания:
   cerebellumCoordination(LastAutomatizmWeiting.ID)
Должно быть осознание цели и перебора - недобора!

В каждом автоматизме есть параметр силы: Automatizm.Energy вот он и корректируется.
т.е. функция рефлекса мозжечка состоит в нахождении излишней или недостаточной силы по результатам действия
и поправки силы действия автоматизма getCerebellumReflexAddEnergy(automatizmID int)
Но самое полезное - выполнение дополнительных действий сразу после исходного автоматизма
по рефлексу, привязанному к исходному автоматизму: runCerebellumReflex(automatizmID int)

В частности, одна из корректирующих функций - энергосберегательная и рефлекс должен это учитывать.
т.е. рефлекс создается при повышенном расходе и уменьшает силу данной реакции.

К этому постепенно, с обучением, добавляются другие координирующие функции, которые по разным признакам
координируют выполнение реакции: cerebellumCoordination()

https://scorcher.ru/diary/topic.php?id=892&page_txt=43
*/

package psychic

import (
	"BOT/brain/gomeostas"
	"BOT/brain/transfer"
)

/*
	Создать или дополнить автоматизм рефлексом мозжечка cerebellumReflexFromID[LastAutomatizmWeiting.ID]

другими корректирующими действиеями
У автоматзма есть свой параметр Energy, но т.к. автоматизм может использоваться в разных случаях,

	лучше для этих конкретных случаев использования уточнять энергичность
	с помощью мозжечковых рефлексов.

Возвращает true, если была оптимизация и нужно запустить такой автоматизм на новое исполнение для проверки.
todo - типа запроса на оптимизацию:
0 - оптимизировать в зависимости от предыдущего значения
1 - усилить
*/
func cerebellumCoordination(atmzm *Automatizm, todo int) bool {
	if atmzm == nil {
		return false
	}
	if transfer.IsPsychicGameMode {
		return false
	} // в игровом режме никаких коррекций, тупая запись нового
	// TODO: учитывать энергосбережение и самосохранение !!!???
	cr := cerebellumReflexFromMotorsID[atmzm.ID]
	if cr != nil { // уже есть мозжечковый рефлекс
		// в прошлый раз было добавлено энергии
		oldEnerg := cr.addEnergy
		if oldEnerg+atmzm.Energy > 9 { // был добавлено лишее, нужно постепенно уменьшить, а не скакать от плюса к минусу
			if todo == 1 {
				return false
			}
			// если остро не хватает энергии
			if gomeostas.GomeostazParams[0] < 10.0 {
				return false
			}
			cr.addEnergy-- // может быть отрицательное число, чтобы уменьшить энергию автоматизма
		}
		if todo == 1 || oldEnerg+atmzm.Energy < 1 { // был добавлено лишее, нужно постепенно добавлять, а не скакать от плюса к минусу
			cr.addEnergy++
		}
		return true
	} else { // нет мозжечкового рефлекса
		// добавить мозжечковый рефлекс
		_, cr = createNewCerebellumReflex(0, 0, atmzm.ID, true)
		if cr != nil {
			if todo == 1 {
				return false
			}
			// добавить энергичность по максимуму
			cr.addEnergy = 10 - atmzm.Energy // хотя при выполнении автоматизма будет подрезана лишняя энергия
			// atmzm.Belief = 3
			if doWritingFile {
				SaveCerebellumReflex()
			}
			return true
		}
	}
	return false
}
